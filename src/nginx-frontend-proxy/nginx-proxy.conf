# Upstream clusters (Mapped from Envoy's clusters)
# Each upstream corresponds to an Envoy cluster

upstream opentelemetry_collector_grpc {
    server otel-collector:4317;
}

upstream opentelemetry_collector_http {
    server otel-collector:4318;
}

upstream frontend {
    server frontend:8080;
}

upstream image_provider {
    server image-provider:8081;
}

upstream flagservice {
    server flagd:8013;
}

# upstream flagd_ui {
#     server flagd-ui:4000;
# }

upstream loadgen {
    server load-generator:8089;
}

upstream grafana {
    server grafana:3000;
}

upstream jaeger {
    server jaeger:16686;
}

# Server block (Mapped from Envoy's listener)

server {
    listen 8080;
    server_name _;


    otel_trace on;
    # /loadgen -> loadgen upstream
    location /loadgen {
        proxy_pass http://loadgen/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        rewrite ^/loadgen/?(.*)$ /$1 break;
    }

    # /otlp-http/ -> opentelemetry_collector_http upstream
    location /otlp-http/ {
        proxy_pass http://opentelemetry_collector_http/;
        proxy_set_header Host $host;
        rewrite ^/otlp-http/?(.*)$ /$1 break;
    }

    # /jaeger -> jaeger upstream
    location /jaeger {
        proxy_pass http://jaeger;
        proxy_set_header Host $host;
    }

    # /grafana -> grafana upstream
    location /grafana {
        proxy_pass http://grafana;
        proxy_set_header Host $host;
    }

    # /images/ -> image_provider upstream
    location /images/ {
        proxy_pass http://image_provider/;
        proxy_set_header Host $host;
        rewrite ^/images/?(.*)$ /$1 break;
    }

    # /flagservice/ -> flagservice upstream
    location /flagservice/ {
        proxy_pass http://flagservice/;
        proxy_set_header Host $host;
        rewrite ^/flagservice/?(.*)$ /$1 break;
        # No timeout (timeout: 0s in Envoy)
        proxy_read_timeout 0;
    }

    # /feature -> flagd_ui upstream
    # location /feature {
    #     proxy_pass http://flagd_ui;
    #     proxy_set_header Host $host;
    # }

    # catch-all ("/") -> frontend upstream
    location / {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
    }
}